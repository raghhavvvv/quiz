{"ast":null,"code":"var _jsxFileName = \"/Users/raghavpant/\\uD83D\\uDCBB/quiz/quiz-frontend/src/AdvancedQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5001\";\nfunction AdvancedQuiz({\n  questionId,\n  onBack\n}) {\n  _s();\n  var _question$options, _question$options$fin;\n  const [question, setQuestion] = useState(null);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [result, setResult] = useState(null);\n  const [score, setScore] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(`${API_URL}/api/quiz/${questionId}`).then(res => res.json()).then(data => {\n      console.log('Quiz data received:', data);\n      setQuestion(data);\n      setLoading(false);\n    }).catch(err => console.error('Failed to fetch quiz data:', err));\n  }, [questionId]);\n  const handleMultipleChoice = optionId => {\n    if (selectedAnswers[questionId]) return;\n    setSelectedAnswers({\n      [questionId]: optionId\n    });\n    checkAnswer({\n      userAnswerId: optionId\n    });\n  };\n  const handleCheckboxes = optionId => {\n    const current = selectedAnswers[questionId] || [];\n    let newSelection;\n    if (current.includes(optionId)) {\n      newSelection = current.filter(id => id !== optionId);\n    } else {\n      newSelection = [...current, optionId];\n    }\n    setSelectedAnswers({\n      ...selectedAnswers,\n      [questionId]: newSelection\n    });\n  };\n  const handleCheckboxesSubmit = () => {\n    if (selectedAnswers[questionId] && selectedAnswers[questionId].length > 0) {\n      checkAnswer({\n        userSelectedIds: selectedAnswers[questionId]\n      });\n    }\n  };\n  const handleReorder = itemId => {\n    const current = selectedAnswers[questionId] || [];\n    if (current.includes(itemId)) {\n      setSelectedAnswers({\n        ...selectedAnswers,\n        [questionId]: current.filter(id => id !== itemId)\n      });\n    } else {\n      setSelectedAnswers({\n        ...selectedAnswers,\n        [questionId]: [...current, itemId]\n      });\n    }\n  };\n  const handleReorderSubmit = () => {\n    if (selectedAnswers[questionId] && selectedAnswers[questionId].length === question.items.length) {\n      checkAnswer({\n        userOrder: selectedAnswers[questionId]\n      });\n    }\n  };\n  const handleRange = value => {\n    setSelectedAnswers({\n      ...selectedAnswers,\n      [questionId]: value\n    });\n  };\n  const handleRangeSubmit = () => {\n    if (selectedAnswers[questionId] !== undefined) {\n      checkAnswer({\n        userValue: selectedAnswers[questionId]\n      });\n    }\n  };\n  const handleLocation = event => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    setSelectedAnswers({\n      ...selectedAnswers,\n      [questionId]: {\n        x,\n        y\n      }\n    });\n    checkAnswer({\n      userLocation: {\n        x,\n        y\n      }\n    });\n  };\n  const handleTypeAnswer = event => {\n    event.preventDefault();\n    const input = event.target.answer.value;\n    if (input.trim()) {\n      checkAnswer({\n        userAnswer: input.trim()\n      });\n    }\n  };\n  const handleMapLandmark = landmarkId => {\n    const current = selectedAnswers[questionId] || [];\n    let newPath;\n    if (current.includes(landmarkId)) {\n      // Remove from path if already selected\n      newPath = current.filter(id => id !== landmarkId);\n    } else {\n      // Add to path\n      newPath = [...current, landmarkId];\n    }\n    setSelectedAnswers({\n      ...selectedAnswers,\n      [questionId]: newPath\n    });\n  };\n  const handleMapSubmit = () => {\n    if (selectedAnswers[questionId] && selectedAnswers[questionId].length > 0) {\n      const lastLandmark = selectedAnswers[questionId][selectedAnswers[questionId].length - 1];\n      checkAnswer({\n        userPath: selectedAnswers[questionId],\n        userDestination: lastLandmark\n      });\n    }\n  };\n  const checkAnswer = answerData => {\n    fetch(`${API_URL}/api/quiz/check-answer`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        questionId: question.questionId,\n        answer: answerData\n      })\n    }).then(res => res.json()).then(data => {\n      console.log('Answer check result:', data);\n      setResult(data);\n      if (data.result === 'correct') {\n        setScore(prevScore => prevScore + 1);\n      }\n    }).catch(err => console.error('Failed to check answer:', err));\n  };\n  const resetQuiz = () => {\n    setSelectedAnswers({});\n    setResult(null);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 12\n    }, this);\n  }\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Question not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 12\n    }, this);\n  }\n  const renderQuestionContent = () => {\n    var _selectedAnswers$ques, _selectedAnswers$ques2;\n    switch (question.questionType) {\n      case 'multiple-choice':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-area\",\n          children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleMultipleChoice(option.optionId),\n            className: `option-button ${getButtonClassName(option.optionId)}`,\n            disabled: !!selectedAnswers[questionId],\n            children: option.text\n          }, option.optionId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this);\n      case 'checkboxes':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkboxes-area\",\n          children: [question.options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-option\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: (selectedAnswers[questionId] || []).includes(option.optionId),\n              onChange: () => handleCheckboxes(option.optionId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: option.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this)]\n          }, option.optionId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCheckboxesSubmit,\n            className: \"submit-button\",\n            disabled: !selectedAnswers[questionId] || selectedAnswers[questionId].length === 0,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this);\n      case 'reorder':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reorder-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reorder-instructions\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Click items in the order you want them:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selected-order\",\n              children: (_selectedAnswers$ques = selectedAnswers[questionId]) === null || _selectedAnswers$ques === void 0 ? void 0 : _selectedAnswers$ques.map((itemId, index) => {\n                const item = question.items.find(i => i.itemId === itemId);\n                return /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"order-item\",\n                  children: [index + 1, \". \", item.text]\n                }, itemId, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reorder-items\",\n            children: question.items.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleReorder(item.itemId),\n              className: `reorder-item ${(selectedAnswers[questionId] || []).includes(item.itemId) ? 'selected' : ''}`,\n              children: item.text\n            }, item.itemId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleReorderSubmit,\n            className: \"submit-button\",\n            disabled: !selectedAnswers[questionId] || selectedAnswers[questionId].length !== question.items.length,\n            children: \"Submit Order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this);\n      case 'range':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"range-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"range-slider\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: question.minValue,\n              max: question.maxValue,\n              value: selectedAnswers[questionId] || question.minValue,\n              onChange: e => handleRange(parseInt(e.target.value)),\n              className: \"range-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"range-value\",\n              children: [\"Selected: \", selectedAnswers[questionId] || question.minValue]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleRangeSubmit,\n            className: \"submit-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this);\n      case 'location':\n      case 'pinpoint':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location-instructions\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.questionType === 'location' ? question.mapInstructions : question.pinpointInstructions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: question.imageId,\n              alt: \"Quiz context\",\n              className: \"quiz-image clickable\",\n              onClick: handleLocation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this), selectedAnswers[questionId] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"location-marker\",\n              style: {\n                left: `${selectedAnswers[questionId].x * 100}%`,\n                top: `${selectedAnswers[questionId].y * 100}%`\n              },\n              children: \"\\uD83D\\uDCCD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location-feedback\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Click anywhere on the image above to mark your answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this);\n      case 'interactive-map':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"interactive-map-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-instructions\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Click on landmarks to navigate to the apple orchard. Start from the starting point and follow the path.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-container\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              width: question.mapData.width,\n              height: question.mapData.height,\n              className: \"map-svg\",\n              viewBox: \"0 0 600 400\",\n              children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                width: \"600\",\n                height: \"400\",\n                fill: \"#e8f5e8\",\n                stroke: \"#333\",\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M 60 320 Q 180 240 300 160 Q 420 80 480 80\",\n                stroke: \"#8B4513\",\n                strokeWidth: \"8\",\n                fill: \"none\",\n                strokeDasharray: \"10,5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 17\n              }, this), question.mapData.landmarks.map(landmark => /*#__PURE__*/_jsxDEV(\"g\", {\n                children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                  cx: landmark.x * 600,\n                  cy: landmark.y * 400,\n                  r: \"20\",\n                  fill: \"#fff\",\n                  stroke: \"#333\",\n                  strokeWidth: \"2\",\n                  className: \"landmark-clickable\",\n                  onClick: () => handleMapLandmark(landmark.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: landmark.x * 600,\n                  y: landmark.y * 400 + 5,\n                  textAnchor: \"middle\",\n                  fontSize: \"16\",\n                  className: \"landmark-icon\",\n                  children: landmark.icon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: landmark.x * 600,\n                  y: landmark.y * 400 + 35,\n                  textAnchor: \"middle\",\n                  fontSize: \"10\",\n                  fill: \"#333\",\n                  children: landmark.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 21\n                }, this)]\n              }, landmark.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 19\n              }, this)), (_selectedAnswers$ques2 = selectedAnswers[questionId]) === null || _selectedAnswers$ques2 === void 0 ? void 0 : _selectedAnswers$ques2.map((landmarkId, index) => {\n                const landmark = question.mapData.landmarks.find(l => l.id === landmarkId);\n                const prevLandmark = index > 0 ? question.mapData.landmarks.find(l => l.id === selectedAnswers[questionId][index - 1]) : null;\n                if (prevLandmark) {\n                  return /*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: prevLandmark.x * 600,\n                    y1: prevLandmark.y * 400,\n                    x2: landmark.x * 600,\n                    y2: landmark.y * 400,\n                    stroke: \"#ff6b6b\",\n                    strokeWidth: \"4\"\n                  }, `path-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 351,\n                    columnNumber: 23\n                  }, this);\n                }\n                return null;\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleMapSubmit,\n              className: \"submit-button\",\n              disabled: !selectedAnswers[questionId] || selectedAnswers[questionId].length === 0,\n              children: \"Navigate to Orchard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedAnswers({\n                ...selectedAnswers,\n                [questionId]: []\n              }),\n              className: \"reset-map-button\",\n              children: \"Reset Path\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this);\n      case 'type-answer':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"type-answer-area\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleTypeAnswer,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"answer\",\n              placeholder: \"Type your answer here...\",\n              className: \"answer-input\",\n              autoComplete: \"off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"submit-button\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Unsupported question type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const getButtonClassName = optionId => {\n    if (!selectedAnswers[questionId]) {\n      return '';\n    }\n    if (result && result.correctOptionId === optionId) {\n      return 'correct';\n    }\n    if (selectedAnswers[questionId] === optionId && result && result.result === 'incorrect') {\n      return 'incorrect';\n    }\n    if (selectedAnswers[questionId] === optionId && result && result.result === 'correct') {\n      return 'correct';\n    }\n    return 'disabled';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        className: \"back-button\",\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-area\",\n      children: [question.imageId && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: question.imageId,\n        alt: \"Quiz context\",\n        className: \"quiz-image\",\n        onError: e => {\n          console.error('Failed to load image:', question.imageId);\n          e.target.style.display = 'none';\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this), renderQuestionContent(), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `result-message ${result.result}`,\n      children: [result.result === 'correct' ? 'Correct! Well done!' : 'Not quite!', result.result === 'incorrect' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feedback-details\",\n        children: [result.correctOptionId && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Correct answer: \", (_question$options = question.options) === null || _question$options === void 0 ? void 0 : (_question$options$fin = _question$options.find(opt => opt.optionId === result.correctOptionId)) === null || _question$options$fin === void 0 ? void 0 : _question$options$fin.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 42\n        }, this), result.correctOptionIds && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Correct answers: \", result.correctOptionIds.map(id => {\n            var _question$options2, _question$options2$fi;\n            return (_question$options2 = question.options) === null || _question$options2 === void 0 ? void 0 : (_question$options2$fi = _question$options2.find(opt => opt.optionId === id)) === null || _question$options2$fi === void 0 ? void 0 : _question$options2$fi.text;\n          }).join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 43\n        }, this), result.correctOrder && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Correct order: \", result.correctOrder.join(' → ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 39\n        }, this), result.correctAnswer && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Correct answer: \", result.correctAnswer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 40\n        }, this), result.correctAnswers && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Possible answers: \", result.correctAnswers.join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 9\n    }, this), result && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetQuiz,\n      className: \"reset-button\",\n      children: \"Try Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n}\n_s(AdvancedQuiz, \"ZLJSS0Mh6qjVxsipzHPNKj9fSiM=\");\n_c = AdvancedQuiz;\nexport default AdvancedQuiz;\nvar _c;\n$RefreshReg$(_c, \"AdvancedQuiz\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_URL","AdvancedQuiz","questionId","onBack","_s","_question$options","_question$options$fin","question","setQuestion","selectedAnswers","setSelectedAnswers","result","setResult","score","setScore","loading","setLoading","fetch","then","res","json","data","console","log","catch","err","error","handleMultipleChoice","optionId","checkAnswer","userAnswerId","handleCheckboxes","current","newSelection","includes","filter","id","handleCheckboxesSubmit","length","userSelectedIds","handleReorder","itemId","handleReorderSubmit","items","userOrder","handleRange","value","handleRangeSubmit","undefined","userValue","handleLocation","event","rect","target","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height","userLocation","handleTypeAnswer","preventDefault","input","answer","trim","userAnswer","handleMapLandmark","landmarkId","newPath","handleMapSubmit","lastLandmark","userPath","userDestination","answerData","method","headers","body","JSON","stringify","prevScore","resetQuiz","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderQuestionContent","_selectedAnswers$ques","_selectedAnswers$ques2","questionType","options","map","option","onClick","getButtonClassName","disabled","text","type","checked","onChange","index","item","find","i","min","minValue","max","maxValue","e","parseInt","mapInstructions","pinpointInstructions","src","imageId","alt","style","mapData","viewBox","fill","stroke","strokeWidth","d","strokeDasharray","landmarks","landmark","cx","cy","r","textAnchor","fontSize","icon","name","l","prevLandmark","x1","y1","x2","y2","onSubmit","placeholder","autoComplete","correctOptionId","onError","display","questionText","opt","correctOptionIds","_question$options2","_question$options2$fi","join","correctOrder","correctAnswer","correctAnswers","_c","$RefreshReg$"],"sources":["/Users/raghavpant/💻/quiz/quiz-frontend/src/AdvancedQuiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst API_URL = \"http://localhost:5001\";\n\nfunction AdvancedQuiz({ questionId, onBack }) {\n  const [question, setQuestion] = useState(null);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [result, setResult] = useState(null);\n  const [score, setScore] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(`${API_URL}/api/quiz/${questionId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log('Quiz data received:', data);\n        setQuestion(data);\n        setLoading(false);\n      })\n      .catch((err) => console.error('Failed to fetch quiz data:', err));\n  }, [questionId]);\n\n  const handleMultipleChoice = (optionId) => {\n    if (selectedAnswers[questionId]) return;\n    \n    setSelectedAnswers({ [questionId]: optionId });\n    checkAnswer({ userAnswerId: optionId });\n  };\n\n  const handleCheckboxes = (optionId) => {\n    const current = selectedAnswers[questionId] || [];\n    let newSelection;\n    \n    if (current.includes(optionId)) {\n      newSelection = current.filter(id => id !== optionId);\n    } else {\n      newSelection = [...current, optionId];\n    }\n    \n    setSelectedAnswers({ ...selectedAnswers, [questionId]: newSelection });\n  };\n\n  const handleCheckboxesSubmit = () => {\n    if (selectedAnswers[questionId] && selectedAnswers[questionId].length > 0) {\n      checkAnswer({ userSelectedIds: selectedAnswers[questionId] });\n    }\n  };\n\n  const handleReorder = (itemId) => {\n    const current = selectedAnswers[questionId] || [];\n    if (current.includes(itemId)) {\n      setSelectedAnswers({ ...selectedAnswers, [questionId]: current.filter(id => id !== itemId) });\n    } else {\n      setSelectedAnswers({ ...selectedAnswers, [questionId]: [...current, itemId] });\n    }\n  };\n\n  const handleReorderSubmit = () => {\n    if (selectedAnswers[questionId] && selectedAnswers[questionId].length === question.items.length) {\n      checkAnswer({ userOrder: selectedAnswers[questionId] });\n    }\n  };\n\n  const handleRange = (value) => {\n    setSelectedAnswers({ ...selectedAnswers, [questionId]: value });\n  };\n\n  const handleRangeSubmit = () => {\n    if (selectedAnswers[questionId] !== undefined) {\n      checkAnswer({ userValue: selectedAnswers[questionId] });\n    }\n  };\n\n  const handleLocation = (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    setSelectedAnswers({ ...selectedAnswers, [questionId]: { x, y } });\n    checkAnswer({ userLocation: { x, y } });\n  };\n\n  const handleTypeAnswer = (event) => {\n    event.preventDefault();\n    const input = event.target.answer.value;\n    if (input.trim()) {\n      checkAnswer({ userAnswer: input.trim() });\n    }\n  };\n\n  const handleMapLandmark = (landmarkId) => {\n    const current = selectedAnswers[questionId] || [];\n    let newPath;\n    \n    if (current.includes(landmarkId)) {\n      // Remove from path if already selected\n      newPath = current.filter(id => id !== landmarkId);\n    } else {\n      // Add to path\n      newPath = [...current, landmarkId];\n    }\n    \n    setSelectedAnswers({ ...selectedAnswers, [questionId]: newPath });\n  };\n\n  const handleMapSubmit = () => {\n    if (selectedAnswers[questionId] && selectedAnswers[questionId].length > 0) {\n      const lastLandmark = selectedAnswers[questionId][selectedAnswers[questionId].length - 1];\n      checkAnswer({ \n        userPath: selectedAnswers[questionId],\n        userDestination: lastLandmark\n      });\n    }\n  };\n\n  const checkAnswer = (answerData) => {\n    fetch(`${API_URL}/api/quiz/check-answer`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        questionId: question.questionId,\n        answer: answerData,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log('Answer check result:', data);\n        setResult(data);\n        if (data.result === 'correct') {\n          setScore(prevScore => prevScore + 1);\n        }\n      })\n      .catch((err) => console.error('Failed to check answer:', err));\n  };\n\n  const resetQuiz = () => {\n    setSelectedAnswers({});\n    setResult(null);\n  };\n\n  if (loading) {\n    return <div className=\"loading\">Loading quiz...</div>;\n  }\n\n  if (!question) {\n    return <div>Question not found</div>;\n  }\n\n  const renderQuestionContent = () => {\n    switch (question.questionType) {\n      case 'multiple-choice':\n        return (\n          <div className=\"options-area\">\n            {question.options.map((option) => (\n              <button\n                key={option.optionId}\n                onClick={() => handleMultipleChoice(option.optionId)}\n                className={`option-button ${getButtonClassName(option.optionId)}`}\n                disabled={!!selectedAnswers[questionId]}\n              >\n                {option.text}\n              </button>\n            ))}\n          </div>\n        );\n\n      case 'checkboxes':\n        return (\n          <div className=\"checkboxes-area\">\n            {question.options.map((option) => (\n              <label key={option.optionId} className=\"checkbox-option\">\n                <input\n                  type=\"checkbox\"\n                  checked={(selectedAnswers[questionId] || []).includes(option.optionId)}\n                  onChange={() => handleCheckboxes(option.optionId)}\n                />\n                <span>{option.text}</span>\n              </label>\n            ))}\n            <button \n              onClick={handleCheckboxesSubmit}\n              className=\"submit-button\"\n              disabled={!selectedAnswers[questionId] || selectedAnswers[questionId].length === 0}\n            >\n              Submit\n            </button>\n          </div>\n        );\n\n      case 'reorder':\n        return (\n          <div className=\"reorder-area\">\n            <div className=\"reorder-instructions\">\n              <p>Click items in the order you want them:</p>\n              <div className=\"selected-order\">\n                {selectedAnswers[questionId]?.map((itemId, index) => {\n                  const item = question.items.find(i => i.itemId === itemId);\n                  return (\n                    <span key={itemId} className=\"order-item\">\n                      {index + 1}. {item.text}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n            <div className=\"reorder-items\">\n              {question.items.map((item) => (\n                <button\n                  key={item.itemId}\n                  onClick={() => handleReorder(item.itemId)}\n                  className={`reorder-item ${(selectedAnswers[questionId] || []).includes(item.itemId) ? 'selected' : ''}`}\n                >\n                  {item.text}\n                </button>\n              ))}\n            </div>\n            <button \n              onClick={handleReorderSubmit}\n              className=\"submit-button\"\n              disabled={!selectedAnswers[questionId] || selectedAnswers[questionId].length !== question.items.length}\n            >\n              Submit Order\n            </button>\n          </div>\n        );\n\n      case 'range':\n        return (\n          <div className=\"range-area\">\n            <div className=\"range-slider\">\n              <input\n                type=\"range\"\n                min={question.minValue}\n                max={question.maxValue}\n                value={selectedAnswers[questionId] || question.minValue}\n                onChange={(e) => handleRange(parseInt(e.target.value))}\n                className=\"range-input\"\n              />\n              <div className=\"range-value\">\n                Selected: {selectedAnswers[questionId] || question.minValue}\n              </div>\n            </div>\n            <button \n              onClick={handleRangeSubmit}\n              className=\"submit-button\"\n            >\n              Submit\n            </button>\n          </div>\n        );\n\n      case 'location':\n      case 'pinpoint':\n        return (\n          <div className=\"location-area\">\n            <div className=\"location-instructions\">\n              <p>{question.questionType === 'location' ? question.mapInstructions : question.pinpointInstructions}</p>\n            </div>\n            <div className=\"image-container\">\n              <img \n                src={question.imageId} \n                alt=\"Quiz context\" \n                className=\"quiz-image clickable\" \n                onClick={handleLocation}\n              />\n              {selectedAnswers[questionId] && (\n                <div \n                  className=\"location-marker\"\n                  style={{\n                    left: `${selectedAnswers[questionId].x * 100}%`,\n                    top: `${selectedAnswers[questionId].y * 100}%`\n                  }}\n                >\n                  📍\n                </div>\n              )}\n            </div>\n            <div className=\"location-feedback\">\n              <p>Click anywhere on the image above to mark your answer</p>\n            </div>\n          </div>\n        );\n\n      case 'interactive-map':\n        return (\n          <div className=\"interactive-map-area\">\n            <div className=\"map-instructions\">\n              <p>Click on landmarks to navigate to the apple orchard. Start from the starting point and follow the path.</p>\n            </div>\n            <div className=\"map-container\">\n              <svg \n                width={question.mapData.width} \n                height={question.mapData.height} \n                className=\"map-svg\"\n                viewBox=\"0 0 600 400\"\n              >\n                {/* Background */}\n                <rect width=\"600\" height=\"400\" fill=\"#e8f5e8\" stroke=\"#333\" strokeWidth=\"2\"/>\n                \n                {/* Paths */}\n                <path \n                  d=\"M 60 320 Q 180 240 300 160 Q 420 80 480 80\" \n                  stroke=\"#8B4513\" \n                  strokeWidth=\"8\" \n                  fill=\"none\" \n                  strokeDasharray=\"10,5\"\n                />\n                \n                {/* Landmarks */}\n                {question.mapData.landmarks.map((landmark) => (\n                  <g key={landmark.id}>\n                    <circle \n                      cx={landmark.x * 600} \n                      cy={landmark.y * 400} \n                      r=\"20\" \n                      fill=\"#fff\" \n                      stroke=\"#333\" \n                      strokeWidth=\"2\"\n                      className=\"landmark-clickable\"\n                      onClick={() => handleMapLandmark(landmark.id)}\n                    />\n                    <text \n                      x={landmark.x * 600} \n                      y={landmark.y * 400 + 5} \n                      textAnchor=\"middle\" \n                      fontSize=\"16\"\n                      className=\"landmark-icon\"\n                    >\n                      {landmark.icon}\n                    </text>\n                    <text \n                      x={landmark.x * 600} \n                      y={landmark.y * 400 + 35} \n                      textAnchor=\"middle\" \n                      fontSize=\"10\"\n                      fill=\"#333\"\n                    >\n                      {landmark.name}\n                    </text>\n                  </g>\n                ))}\n                \n                {/* User's path */}\n                {selectedAnswers[questionId]?.map((landmarkId, index) => {\n                  const landmark = question.mapData.landmarks.find(l => l.id === landmarkId);\n                  const prevLandmark = index > 0 ? question.mapData.landmarks.find(l => l.id === selectedAnswers[questionId][index - 1]) : null;\n                  \n                  if (prevLandmark) {\n                    return (\n                      <line \n                        key={`path-${index}`}\n                        x1={prevLandmark.x * 600} \n                        y1={prevLandmark.y * 400} \n                        x2={landmark.x * 600} \n                        y2={landmark.y * 400} \n                        stroke=\"#ff6b6b\" \n                        strokeWidth=\"4\"\n                      />\n                    );\n                  }\n                  return null;\n                })}\n              </svg>\n            </div>\n            <div className=\"map-controls\">\n              <button \n                onClick={handleMapSubmit}\n                className=\"submit-button\"\n                disabled={!selectedAnswers[questionId] || selectedAnswers[questionId].length === 0}\n              >\n                Navigate to Orchard\n              </button>\n              <button \n                onClick={() => setSelectedAnswers({ ...selectedAnswers, [questionId]: [] })}\n                className=\"reset-map-button\"\n              >\n                Reset Path\n              </button>\n            </div>\n          </div>\n        );\n\n      case 'type-answer':\n        return (\n          <div className=\"type-answer-area\">\n            <form onSubmit={handleTypeAnswer}>\n              <input\n                type=\"text\"\n                name=\"answer\"\n                placeholder=\"Type your answer here...\"\n                className=\"answer-input\"\n                autoComplete=\"off\"\n              />\n              <button type=\"submit\" className=\"submit-button\">\n                Submit\n              </button>\n            </form>\n          </div>\n        );\n\n      default:\n        return <div>Unsupported question type</div>;\n    }\n  };\n\n  const getButtonClassName = (optionId) => {\n    if (!selectedAnswers[questionId]) {\n      return '';\n    }\n    \n    if (result && result.correctOptionId === optionId) {\n      return 'correct';\n    }\n    \n    if (selectedAnswers[questionId] === optionId && result && result.result === 'incorrect') {\n      return 'incorrect';\n    }\n    \n    if (selectedAnswers[questionId] === optionId && result && result.result === 'correct') {\n      return 'correct';\n    }\n    \n    return 'disabled';\n  };\n\n  return (\n    <div className=\"quiz-container\">\n      <div className=\"quiz-header\">\n        <button onClick={onBack} className=\"back-button\">← Back</button>\n        <h1>Quiz</h1>\n        <p className=\"score\">Score: {score}</p>\n      </div>\n\n      <div className=\"question-area\">\n        {question.imageId && (\n          <img \n            src={question.imageId} \n            alt=\"Quiz context\" \n            className=\"quiz-image\" \n            onError={(e) => {\n              console.error('Failed to load image:', question.imageId);\n              e.target.style.display = 'none';\n            }}\n          />\n        )}\n        <h2>{question.questionText}</h2>\n      </div>\n\n      {renderQuestionContent()}\n      \n      {result && (\n        <div className={`result-message ${result.result}`}>\n          {result.result === 'correct' ? 'Correct! Well done!' : 'Not quite!'}\n          {result.result === 'incorrect' && (\n            <div className=\"feedback-details\">\n              {result.correctOptionId && <p>Correct answer: {question.options?.find(opt => opt.optionId === result.correctOptionId)?.text}</p>}\n              {result.correctOptionIds && <p>Correct answers: {result.correctOptionIds.map(id => question.options?.find(opt => opt.optionId === id)?.text).join(', ')}</p>}\n              {result.correctOrder && <p>Correct order: {result.correctOrder.join(' → ')}</p>}\n              {result.correctAnswer && <p>Correct answer: {result.correctAnswer}</p>}\n              {result.correctAnswers && <p>Possible answers: {result.correctAnswers.join(', ')}</p>}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {result && (\n        <button onClick={resetQuiz} className=\"reset-button\">\n          Try Again\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default AdvancedQuiz;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}